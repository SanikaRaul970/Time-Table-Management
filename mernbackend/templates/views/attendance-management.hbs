<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attendance Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
        }

        body {
            background: #f5f5f5;
            min-height: 100vh;
        }

        .header {
            background: #8A2BE2;
            color: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-title {
            font-size: 1.5rem;
            font-weight: 500;
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 8px;
            text-align: center;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 500;
            color: #8A2BE2;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .attendance-form {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .student-list {
            margin-top: 20px;
        }

        .student-attendance {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #eee;
        }

        .attendance-buttons {
            display: flex;
            gap: 10px;
        }

        .attendance-btn {
            padding: 5px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .attendance-btn.active {
            transform: scale(0.95);
            box-shadow: 0 0 5px rgba(0,0,0,0.2);
        }

        .btn-success {
            background-color: #28a745;
            color: white;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        #submitAttendance {
            width: 100%;
            padding: 10px;
            margin-top: 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #submitAttendance:hover {
            background-color: #0056b3;
        }

        .form-control {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .history-section {
            margin-top: 2rem;
        }

        .history-filters {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .history-table {
            width: 100%;
            border-collapse: collapse;
        }

        .history-table th,
        .history-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .history-table th {
            background: #f8f9fa;
            font-weight: 500;
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .student-row {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .attendance-options {
                width: 100%;
                justify-content: space-around;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="nav-container">
            <h1 class="nav-title">Attendance Management</h1>
            <div class="nav-info">
                <span>{{teacher.subject}} | {{teacher.department}} | {{teacher.year}} | {{teacher.division}}</span>
            </div>
        </div>
    </header>

    <div class="container">
        {{#if message}}
        <div class="message success">{{message}}</div>
        {{/if}}
        {{#if error}}
        <div class="message error">{{error}}</div>
        {{/if}}

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">{{attendanceStats.totalClasses}}</div>
                <div class="stat-label">Classes This Week</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{{attendanceStats.averageAttendance}}%</div>
                <div class="stat-label">Average Attendance</div>
            </div>
        </div>

        <div class="card">
            <h2>Mark Attendance</h2>
            <div class="attendance-form">
                <div class="form-group">
                    <label for="attendanceDate">Select Date:</label>
                    <input type="date" id="attendanceDate" name="attendanceDate" class="form-control" required>
                </div>
                
                <div class="student-list">
                    {{#each students}}
                    <div class="student-attendance">
                        <span>{{this.name}} ({{this.sapid}})</span>
                        <div class="attendance-buttons">
                            <button type="button" class="btn btn-success attendance-btn" data-student="{{this._id}}" data-status="present">Present</button>
                            <button type="button" class="btn btn-danger attendance-btn" data-student="{{this._id}}" data-status="absent">Absent</button>
                        </div>
                    </div>
                    {{/each}}
                </div>

                <button type="button" id="submitAttendance" class="btn btn-primary mt-3">Submit Attendance</button>
            </div>
        </div>

        <div class="card history-section">
            <h2>Attendance History</h2>
            <div class="history-filters">
                <input type="date" id="startDate" class="date-picker">
                <input type="date" id="endDate" class="date-picker">
                <button onclick="fetchAttendanceHistory()" class="btn btn-secondary">View History</button>
            </div>
            <div id="historyTable"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const attendanceData = {};
            const attendanceButtons = document.querySelectorAll('.attendance-btn');
            const submitButton = document.getElementById('submitAttendance');
            const dateInput = document.getElementById('attendanceDate');

            // Set today's date as default
            const today = new Date().toISOString().split('T')[0];
            dateInput.value = today;
            dateInput.max = today;  // Prevent future dates

            attendanceButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const studentId = this.dataset.student;
                    const status = this.dataset.status;
                    const studentContainer = this.closest('.student-attendance');

                    // Remove active class from all buttons in this container
                    studentContainer.querySelectorAll('.attendance-btn').forEach(btn => {
                        btn.classList.remove('active');
                    });

                    // Add active class to clicked button
                    this.classList.add('active');
                    
                    // Store the attendance status
                    attendanceData[studentId] = status;
                });
            });

            submitButton.addEventListener('click', async function() {
                const date = dateInput.value;
                
                if (!date) {
                    alert('Please select a date');
                    return;
                }

                if (Object.keys(attendanceData).length === 0) {
                    alert('Please mark attendance for at least one student');
                    return;
                }

                try {
                    const response = await fetch('/submit-attendance', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            date: date,
                            attendanceData: attendanceData
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert(`Attendance submitted successfully!\nTotal Students: ${result.totalStudents}\nPresent: ${result.presentCount}\nAbsent: ${result.absentCount}`);
                        window.location.href = '/teacher-dashboard';
                    } else {
                        alert(result.error || 'Error submitting attendance');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error submitting attendance. Please try again.');
                }
            });
        });

        async function fetchAttendanceHistory() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            try {
                const response = await fetch(`/attendance-history?startDate=${startDate}&endDate=${endDate}`);
                const data = await response.json();

                if (response.ok) {
                    displayAttendanceHistory(data);
                } else {
                    alert('Error fetching attendance history');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error fetching attendance history');
            }
        }

        function displayAttendanceHistory(records) {
            const table = document.createElement('table');
            table.className = 'history-table';

            const thead = document.createElement('thead');
            thead.innerHTML = `
                <tr>
                    <th>Date</th>
                    <th>Present</th>
                    <th>Absent</th>
                    <th>Percentage</th>
                </tr>
            `;
            table.appendChild(thead);

            const tbody = document.createElement('tbody');
            records.forEach(record => {
                const presentCount = record.records.filter(r => r.status === 'present').length;
                const totalCount = record.records.length;
                const percentage = Math.round((presentCount / totalCount) * 100);

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${new Date(record.date).toLocaleDateString()}</td>
                    <td>${presentCount}</td>
                    <td>${totalCount - presentCount}</td>
                    <td>${percentage}%</td>
                `;
                tbody.appendChild(row);
            });
            table.appendChild(tbody);

            document.getElementById('historyTable').innerHTML = '';
            document.getElementById('historyTable').appendChild(table);
        }

        // Set initial dates for history
        const today = new Date();
        const lastWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
        document.getElementById('endDate').value = today.toISOString().split('T')[0];
        fetchAttendanceHistory();
    </script>
</body>
</html> 